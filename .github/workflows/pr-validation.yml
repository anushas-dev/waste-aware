name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          frontend:
            - 'pages/**'
            - 'components/**'
            - 'styles/**'
            - 'public/**'
            - '*.js'
            - '*.json'
          dependencies:
            - 'package.json'
            - 'package-lock.json'
          docs:
            - '*.md'
            - 'docs/**'

  pr-info:
    name: PR Information
    runs-on: ubuntu-latest
    steps:
    - name: PR Details
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          
          core.info(`PR #${pr.number}: ${pr.title}`);
          core.info(`Author: ${pr.user.login}`);
          core.info(`Base: ${pr.base.ref} ← Head: ${pr.head.ref}`);
          core.info(`Draft: ${pr.draft}`);
          
          // Add PR summary to job summary
          core.summary
            .addHeading('🔍 Pull Request Analysis')
            .addTable([
              [{data: 'Property', header: true}, {data: 'Value', header: true}],
              ['PR Number', `#${pr.number}`],
              ['Title', pr.title],
              ['Author', pr.user.login],
              ['Branch', `${pr.base.ref} ← ${pr.head.ref}`],
              ['Status', pr.draft ? 'Draft' : 'Ready for Review'],
              ['Files Changed', `${pr.changed_files}`],
              ['Additions', `+${pr.additions}`],
              ['Deletions', `-${pr.deletions}`]
            ])
            .write();

  validate-frontend:
    name: Frontend Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting on changed files
      run: |
        # Get list of changed JavaScript/JSX files
        git diff --name-only origin/main...HEAD | grep -E '\.(js|jsx)$' > changed_files.txt || echo "No JS/JSX files changed"
        
        if [ -s changed_files.txt ]; then
          echo "Linting changed files:"
          cat changed_files.txt
          # Run eslint on changed files
          npx eslint $(cat changed_files.txt | tr '\n' ' ') || exit 1
        else
          echo "No JavaScript files to lint"
        fi
      
    - name: Build with changes
      run: npm run build
      
    - name: Check bundle size impact
      run: |
        # Build and check .next folder size
        BUNDLE_SIZE=$(du -sh .next | cut -f1)
        echo "Bundle size: $BUNDLE_SIZE"
        echo "BUNDLE_SIZE=$BUNDLE_SIZE" >> $GITHUB_ENV
        
    - name: Comment bundle size
      uses: actions/github-script@v7
      with:
        script: |
          const bundleSize = process.env.BUNDLE_SIZE;
          
          const comment = `## 📦 Build Analysis
          
          **Bundle Size:** \`${bundleSize}\`
          
          ✅ Frontend build completed successfully with your changes!
          
          <details>
          <summary>What was tested</summary>
          
          - ESLint validation on changed files
          - Next.js build process
          - Bundle size analysis
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  validate-dependencies:
    name: Dependency Validation
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.dependencies == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Validate package-lock.json
      run: |
        # Check if package-lock.json is in sync with package.json
        npm ci
        
        # Run security audit
        npm audit --audit-level=moderate
        
    - name: Check for breaking changes
      run: |
        # Install npm-check-updates to analyze changes
        npm install -g npm-check-updates
        
        # Get current dependencies
        git show HEAD~1:package.json > old-package.json || echo "{}" > old-package.json
        
        echo "## Dependency Changes" > dep-changes.md
        echo "" >> dep-changes.md
        
        # Compare dependencies
        echo "Analyzing dependency changes..." >> dep-changes.md
        
    - name: Comment dependency analysis
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let analysis = "## 🔄 Dependency Analysis\n\n";
          analysis += "✅ Dependencies validated successfully!\n\n";
          analysis += "**Checks performed:**\n";
          analysis += "- Package-lock.json sync verification\n";
          analysis += "- Security vulnerability scan\n";
          analysis += "- Dependency conflict check\n\n";
          analysis += "All dependency changes look good to merge! 🎉";
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: analysis
          });

  pr-checklist:
    name: PR Checklist Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate PR requirements
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          
          let checks = [];
          let passed = 0;
          let total = 0;
          
          // Check PR title format
          total++;
          if (pr.title.length > 10 && pr.title.length < 100) {
            checks.push("✅ PR title has appropriate length");
            passed++;
          } else {
            checks.push("❌ PR title should be between 10-100 characters");
          }
          
          // Check if PR has description
          total++;
          if (pr.body && pr.body.length > 20) {
            checks.push("✅ PR has description");
            passed++;
          } else {
            checks.push("❌ PR should have a meaningful description");
          }
          
          // Check if PR is not a draft
          total++;
          if (!pr.draft) {
            checks.push("✅ PR is ready for review");
            passed++;
          } else {
            checks.push("⏳ PR is still in draft mode");
          }
          
          // Check branch name
          total++;
          const branchName = pr.head.ref;
          if (branchName !== 'main' && branchName !== 'master') {
            checks.push("✅ Working on feature branch");
            passed++;
          } else {
            checks.push("⚠️ Should not work directly on main branch");
          }
          
          const score = Math.round((passed / total) * 100);
          
          const comment = `## 📋 PR Checklist
          
          **Score: ${passed}/${total} (${score}%)**
          
          ${checks.map(check => `- ${check}`).join('\n')}
          
          ${score >= 75 ? '🎉 Great job! This PR looks ready for review.' : '💡 Please address the items above before merging.'}
          
          ---
          *This checklist helps maintain code quality and review standards.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  final-validation:
    name: Final Merge Validation
    runs-on: ubuntu-latest
    needs: [validate-frontend, validate-dependencies, pr-checklist]
    if: always()
    
    steps:
    - name: Overall status check
      run: |
        echo "## 🎯 Merge Readiness Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        FRONTEND_STATUS="${{ needs.validate-frontend.result }}"
        DEPS_STATUS="${{ needs.validate-dependencies.result }}"
        CHECKLIST_STATUS="${{ needs.pr-checklist.result }}"
        
        if [[ "$FRONTEND_STATUS" == "success" || "$FRONTEND_STATUS" == "skipped" ]] && \
           [[ "$DEPS_STATUS" == "success" || "$DEPS_STATUS" == "skipped" ]] && \
           [[ "$CHECKLIST_STATUS" == "success" ]]; then
          echo "🟢 **Status**: Ready to merge" >> $GITHUB_STEP_SUMMARY
          echo "All validation checks have passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "🟡 **Status**: Needs attention" >> $GITHUB_STEP_SUMMARY
          echo "Some checks require review before merging." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Individual Results:**" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: $FRONTEND_STATUS" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies: $DEPS_STATUS" >> $GITHUB_STEP_SUMMARY
        echo "- PR Checklist: $CHECKLIST_STATUS" >> $GITHUB_STEP_SUMMARY